// Motor control pins
const int enA = 3;
const int in1 = 8;
const int in2 = 9;
const int enB = 5;
const int in3 = 10;
const int in4 = 11;

// IR sensors
const int irLeft = 2;  // Left IR sensor
const int irRight = 4; // Right IR sensor

// Ultrasonic sensor pins
const int trigPin = 6;
const int echoPin = 7;

// For obstacle detection and movement control
long duration;
int distance;
bool isObstacleDetected = false; // Flag for obstacle detection

void setup() {
  Serial.begin(9600);  // Start serial communication

  // Motor pins
  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  // IR sensors
  pinMode(irLeft, INPUT);
  pinMode(irRight, INPUT);

  // Ultrasonic sensor pins
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}

void loop() {
  // Read IR sensor states
  int leftIR = digitalRead(irLeft);
  int rightIR = digitalRead(irRight);

  // Read Ultrasonic sensor
  distance = getDistance();

  // Debug info for IR sensors and Ultrasonic sensor
  Serial.print("Left IR: "); 
  Serial.print(leftIR);  // Print Left IR sensor value (0 or 1)
  Serial.print(" | Right IR: "); 
  Serial.print(rightIR); // Print Right IR sensor value (0 or 1)
  Serial.print(" | Distance: "); 
  Serial.println(distance); // Print ultrasonic sensor distance

  // Check if obstacle is detected within 15 cm range
  if (distance < 15 && distance > 0) {  // 15 cm threshold for stopping
    if (!isObstacleDetected) {
      stopMotors();
      Serial.println("Obstacle detected! Stopping.");
      isObstacleDetected = true;  // Set the flag to stop further checks
      delay(1000);  // Wait for 1 second before checking again
    }
  } else {
    isObstacleDetected = false;  // Reset obstacle flag if the path is clear
  }

  // Only proceed with line-following if no obstacle is detected
  if (!isObstacleDetected) {
    // Line-following logic based on IR sensor inputs
    if (leftIR == LOW && rightIR == LOW) {
      // Both sensors detect the line: Move forward
      moveForward();
      Serial.println("Moving Forward");
    }
    else if (leftIR == LOW && rightIR == HIGH) {
      // Left sensor detects the line, right doesn't: Turn left
      turnLeft();
      Serial.println("Turning Left");
    }
    else if (leftIR == HIGH && rightIR == LOW) {
      // Right sensor detects the line, left doesn't: Turn right
      turnRight();
      Serial.println("Turning Right");
    }
    else {
      // Both sensors don't detect the line: Stop motors
      stopMotors();
      Serial.println("Lost Line. Stopping.");
    }
  }

  delay(100);  // Small delay to smooth out the movements
}

// Ultrasonic function to measure distance
int getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);

  // Check if the duration is valid (non-zero)
  if (duration == 0) {
    Serial.println("Error: Invalid ultrasonic reading");
    return -1;  // Return -1 for an invalid distance
  }

  int cm = duration * 0.034 / 2;  // Convert duration to distance in cm

  // Validate the distance: If the sensor is reading an invalid value, return 0
  if (cm < 2 || cm > 400) {
    Serial.println("Invalid distance reading, returning 0.");
    return 0;
  }

  return cm;  // Return the valid distance in cm
}

// Motor control functions
void moveForward() {
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  analogWrite(enA, 255);  // Full speed
  analogWrite(enB, 255);  // Full speed
}

void turnLeft() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  analogWrite(enA, 255);  // Full speed
  analogWrite(enB, 255);  // Full speed
}

void turnRight() {
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  analogWrite(enA, 255);  // Full speed
  analogWrite(enB, 255);  // Full speed
}

void stopMotors() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  analogWrite(enA, 0);  // Stop left motor
  analogWrite(enB, 0);  // Stop right motor
}
